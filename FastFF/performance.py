# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_performance.ipynb.

# %% auto 0
__all__ = ['run_sweep', 'FFFLeavesDistCB']

# %% ../nbs/02_performance.ipynb 4
import wandb
from fastai.vision.all import *
from fastai.callback.wandb import *

# %% ../nbs/02_performance.ipynb 10
def run_sweep(train_ds, test_ds, prm_model,sweep_cfg,
              metrics = accuracy,
              loss = F.cross_entropy,
              opt = Adam,
              cfg = None,
              cbs=[WandbCallback()], project=None, count=5, seed=0):
    def _f(cfg=cfg):
        with wandb.init(config=cfg):
            if seed is not None: set_seed(seed)
            cfg = wandb.config
            model = prm_model(**cfg.model)
            dls = DataLoaders(TfmdDL(train_ds, cfg.bs, True),TfmdDL(test_ds, cfg.bs, False))
            learn = Learner(dls, model, loss_func=loss, metrics=metrics, opt_func = opt)
            learn.fit_one_cycle(cfg.epochs, **cfg.learn, cbs=cbs)
    
    sweep_id = wandb.sweep(sweep_cfg, project=project)
    wandb.agent(sweep_id, _f, count=count)

# %% ../nbs/02_performance.ipynb 17
class FFFLeavesDistCB(Callback):
    def __init__(self, use_wandb=False):
        self.wandb = use_wandb
 
    def before_fit(self): 
        self.total_leaves = getattr(self.learn.model, 'total_leaves', None)
        if self.wandb: self._wandb_step = wandb.run.step - 1
        self.data = []
    def before_epoch(self): 
        self.tree_leaves, self.preds = [], []
        self.xs, self.ys = [], []
    
    def after_batch(self): 
        if self.training: 
            if self.wandb:  self._wandb_step += 1
            self.tree_leaves.append(self.learn.leaves.argmax(1))
            self.preds.append(self.pred.argmax(1))
            self.xs.append(self.xb[0]), self.ys.append(self.yb[0])
    
    def after_epoch(self):
        leaves, preds = torch.cat(self.tree_leaves),torch.cat(self.preds)
        xs, ys = torch.cat(self.xs), torch.cat(self.ys)
        self.data.append((xs,ys,leaves,preds))
        if self.wandb: 
            fig, axs = subplots()
            self.leaf_hist(-1, ax=axs[0], show=False)
            handles, labels = axs[0].get_legend_handles_labels()
            fig.legend(handles, labels)
            wandb.log({"Leaf distribution": fig}, step = self._wandb_step)
    
    def leaf_hist(self, epoch_idx, ax=None, show=True):
        leaves, preds = self.data[epoch_idx][2], self.data[epoch_idx][1]
        if not self.total_leaves: self.total_leaves = leaves.unique().max()+1
        if not ax: ax = subplots()[1][0]
        bottom, bins = torch.zeros(self.total_leaves), L(range(self.total_leaves)).map(str)
        for d in range(10):
            hist = torch.bincount(leaves[preds==d], minlength=self.total_leaves)
            ax.bar(bins, hist, label=str(d),bottom=bottom)
            bottom += hist
        if show: 
             ax.legend(); plt.show()

